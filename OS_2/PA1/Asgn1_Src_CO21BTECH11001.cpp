/*
C++ program to approximate value of pi using monte carlo method
Author: Aaryan
Roll number: CO21BTECH11001
*/

#include <iostream>
#include <pthread.h>
#include <sys/stat.h>
#include <math.h>
#include <time.h>
#define M 1.0e6

// Side length of square is 1 units
// Center of square and circle is the coordinate (0, 0)
// Equation of circle is x^2 + y^2 = 0

/*A structure to store some data related to point*/
struct data
{
    double x;    // Stores x coordinate of the point
    double y;    // Stores y coordinate of the point
    bool inside; // True if point is inside the circle, false otherwise.
};

/*A structure to pass arguments to a thread*/
struct thread_args
{
    int num_points;           // Number of random points to be generated by thread
    int num_inside;           // Number of points inside the circle, out of all numbers generated by thread
    int *ptr_to_total; // All points inside the circle counted by all the threads
    data *arr;                // Array to store the coordinates of point generated along with a boolean indicating whether or not the point is inside the circle
};

/*Runner function of thread*/
void *runner(void *args)
{
    thread_args *ptr = (thread_args *)args;
    for (int i = 0; i < ptr->num_points; i++)
    {
        // Generates random floating point number between -1.0 and 1.0
        double x = ((double)rand() / (double)(RAND_MAX)) * 2.0 - 1;
        double y = ((double)rand() / (double)(RAND_MAX)) * 2.0 - 1;
        (ptr->arr)[i].x = x;
        (ptr->arr)[i].y = y;
        // Checking whether point is inside circle
        if (x * x + y * y - 1 < 0)
        {
            (ptr->arr)[i].inside = true;
            (ptr->num_inside)++;
        }
        else
            (ptr->arr)[i].inside = false;
    }
    // Increase total_points_inside by number of points inside which are identified by this thread
    *(ptr->ptr_to_total) += ptr->num_inside;
}

/*Please give name of input file in command line argument*/
int main(int argc, char **argv)
{
    /*read input file*/
    FILE *input = fopen(argv[1], "r");
    if (input == NULL)
    {
        printf("%s: File doesn't exist\n", argv[1]);
        return 0;
    }
    // Output file to be generated by main thread
    FILE *out_file = fopen("output.txt", "w");

    // Number of points, number of threads
    int n, num_threads;
    if (fscanf(input, "%d %d", &n, &num_threads) != EOF)
    {
        // To seed the random number generator
        srand((unsigned int)time(NULL));

        // Variable to count the number of randomly generated points, which are inside the circle
        int total_points_inside = 0;
        // Pointer to the total_points_inside variable, will be passed to threads
        int *ptr_to_total = &total_points_inside;

        int div = n / num_threads;

        // Array of thread identifier of different threads
        pthread_t threads[num_threads];
        pthread_attr_t attr;
        // Set the default attributes of threads
        pthread_attr_init(&attr);

        // Array of arguments to be passed to threads
        thread_args arguments[num_threads];

        for (int i = 0; i < num_threads; i++)
        {
            if (i != num_threads - 1)
            {
                // All threads except thread will be assigned div number of points
                arguments[i].num_points = div;
                arguments[i].num_inside = 0;
                // Size of array is equal to number of points it will generate
                arguments[i].arr = (data *)malloc(sizeof(data) * div);
                // total_points_inside passed as pointer
                arguments[i].ptr_to_total = ptr_to_total;
            }
            else
            {
                // Remaining number of points will be passed to last thread
                arguments[i].num_points = n - (num_threads - 1) * div;
                arguments[i].num_inside = 0;
                // Size of array is equal to number of points it will generate
                arguments[i].arr = (data *)malloc(sizeof(data) * (n - (num_threads - 1) * div));
                // total_points_inside passed as pointer
                arguments[i].ptr_to_total = ptr_to_total;
            }
        }

        // Track of time
        double time_spent = 0.0;
        clock_t begin = clock();

        // Create the threads
        for (int i = 0; i < num_threads; i++)
            pthread_create(&threads[i], &attr, runner, &arguments[i]);

        // Join threads
        for (int i = 0; i < num_threads; i++)
            pthread_join(threads[i], NULL);

        // Monte carlo method to approximate pi
        double value_of_pi = 4.0 * ((double)(total_points_inside)) / ((double)n);

        clock_t end = clock();
        // Total time spent in microseconds
        time_spent += (double)(end - begin) * (M) / CLOCKS_PER_SEC;

        // Print time taken in output file
        fprintf(out_file, "Time: %.1lf \xC2\xB5s\n\n", time_spent);

        // Print value approximated in output file
        fprintf(out_file, "Value Computed: %lf\n\n", value_of_pi);

        // Print log in output file
        fprintf(out_file, "Log:\n\n");
        for (int i = 0; i < num_threads; i++)
        {
            int points_inside_circle = arguments[i].num_inside;
            int points_inside_square = arguments[i].num_points - arguments[i].num_inside;
            int total_points = arguments[i].num_points;

            // Print number of points inside square and points inside circle in output file
            fprintf(out_file, "Thread%d: %d, %d\n", i + 1, points_inside_square, points_inside_circle);
            fprintf(out_file, "Points inside the square: ");

            // Iterate over all points and print the points which are inside the square and outside the circle
            for (int j = 0; j < total_points; j++)
            {
                if (arguments[i].arr[j].inside == false)
                {
                    fprintf(out_file, "(%lf, %lf), ", arguments[i].arr[j].x, arguments[i].arr[j].y);
                }
            }
            fprintf(out_file, "\n");
            fprintf(out_file, "Points inside the circle: ");

            // Iterate over all points and print the points which are inside the circle
            for (int j = 0; j < total_points; j++)
            {
                if (arguments[i].arr[j].inside == true)
                {
                    fprintf(out_file, "(%lf, %lf), ", arguments[i].arr[j].x, arguments[i].arr[j].y);
                }
            }
            fprintf(out_file, "\n\n");
        }
        fclose(input);
        fclose(out_file);
        for (int i = 0; i < num_threads; i++)
            free(arguments[i].arr);
    }
    else
    {
        printf("No input written in the file\n");
    }
    return 0;
}